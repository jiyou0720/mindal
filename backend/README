
MariaDB 테이블 구조 및 데이터 설명
flask db upgrade 명령어를 실행하면, 애플리케이션에 필요한 다음과 같은 테이블들이 데이터베이스에 생성됩니다.

1. users
역할: 회원가입한 사용자의 기본 정보를 저장하는 가장 핵심적인 테이블입니다.

주요 데이터 (컬럼):

id: 사용자별 고유 번호 (기본 키, 자동 증가).

username: 사용자의 실명 또는 아이디.

email: 로그인 시 사용되는 이메일 주소.

password_hash: 비밀번호를 암호화하여 저장.

user_uid: 각 사용자를 구별하는 고유한 숫자 ID.

nickname: 앱 내에서 표시될 별명.

gender, age, major: 사용자의 성별, 나이, 전공.

created_at, updated_at: 계정 생성 및 마지막 수정 시각.

2. roles
역할: 사용자의 권한 등급을 정의합니다. (예: '관리자', '일반 사용자')

주요 데이터 (컬럼):

id: 역할별 고유 번호.

name: 역할의 이름 (예: '관리자').

초기 데이터: initialize_roles_and_admin.py 스크립트를 실행하면 '일반 사용자'와 '관리자' 역할이 기본적으로 추가됩니다.

3. user_roles
역할: 어떤 사용자가 어떤 역할을 가지고 있는지 연결하는 중간 다리 역할을 하는 테이블입니다. (사용자와 역할의 다대다 관계 표현)

주요 데이터 (컬럼):

user_id: users 테이블의 사용자 ID.

role_id: roles 테이블의 역할 ID.

4. posts
역할: 커뮤니티 게시판에 작성된 게시글의 메타데이터(요약 정보)를 저장합니다.

주요 데이터 (컬럼):

id: 게시글 고유 번호.

title: 게시글 제목.

user_id: 게시글을 작성한 사용자의 ID (users 테이블과 연결).

is_notice: 공지사항 여부를 표시 (True 또는 False).

created_at, updated_at: 글 작성 및 마지막 수정 시각.

참고: 게시글의 본문과 같이 용량이 큰 내용은 효율적인 관리를 위해 MongoDB에 별도로 저장됩니다.

5. comments
역할: 각 게시글에 달린 댓글 내용을 저장합니다.

주요 데이터 (컬럼):

id: 댓글 고유 번호.

content: 댓글의 실제 내용.

post_id: 이 댓글이 어떤 게시글에 달렸는지 알려주는 번호 (posts 테이블과 연결).

user_id: 댓글을 작성한 사용자의 ID (users 테이블과 연결).

created_at, updated_at: 댓글 작성 및 마지막 수정 시각.

6. post_likes 와 comment_likes
역할: 어떤 사용자가 어떤 게시글이나 댓글에 '좋아요'를 눌렀는지 기록합니다.

주요 데이터 (컬럼):

user_id: '좋아요'를 누른 사용자의 ID.

post_id 또는 comment_id: '좋아요'를 받은 게시글 또는 댓글의 ID.

7. nickname_history
역할: 사용자가 닉네임을 변경할 때마다, 이전 닉네임을 기록하여 닉네임 변경 이력을 관리합니다.

주요 데이터 (컬럼):

id: 이력의 고유 번호.

user_id: 닉네임을 변경한 사용자의 ID.

old_nickname: 변경 전 닉네임.

new_nickname: 새로 설정한 닉네임.

changed_at: 변경이 일어난 시각.

8. alembic_version
역할: 데이터베이스 마이그레이션 도구(Alembic)가 사용하는 내부 관리용 테이블입니다. 현재 데이터베이스 구조가 최신 버전인지 추적하는 역할을 하므로, 직접 수정하거나 신경 쓰지 않으셔도 됩니다.

주요 데이터 (컬럼):

=======
MariaDB 테이블 구조 및 데이터 설명
flask db upgrade 명령어를 실행하면, 애플리케이션에 필요한 다음과 같은 테이블들이 데이터베이스에 생성됩니다.

1. users
역할: 회원가입한 사용자의 기본 정보를 저장하는 가장 핵심적인 테이블입니다.

주요 데이터 (컬럼):

id: 사용자별 고유 번호 (기본 키, 자동 증가).

username: 사용자의 실명 또는 아이디.

email: 로그인 시 사용되는 이메일 주소.

password_hash: 비밀번호를 암호화하여 저장.

user_uid: 각 사용자를 구별하는 고유한 숫자 ID.

nickname: 앱 내에서 표시될 별명.

gender, age, major: 사용자의 성별, 나이, 전공.

created_at, updated_at: 계정 생성 및 마지막 수정 시각.

2. roles
역할: 사용자의 권한 등급을 정의합니다. (예: '관리자', '일반 사용자')

주요 데이터 (컬럼):

id: 역할별 고유 번호.

name: 역할의 이름 (예: '관리자').

초기 데이터: initialize_roles_and_admin.py 스크립트를 실행하면 '일반 사용자'와 '관리자' 역할이 기본적으로 추가됩니다.

3. user_roles
역할: 어떤 사용자가 어떤 역할을 가지고 있는지 연결하는 중간 다리 역할을 하는 테이블입니다. (사용자와 역할의 다대다 관계 표현)

주요 데이터 (컬럼):

user_id: users 테이블의 사용자 ID.

role_id: roles 테이블의 역할 ID.

4. posts
역할: 커뮤니티 게시판에 작성된 게시글의 메타데이터(요약 정보)를 저장합니다.

주요 데이터 (컬럼):

id: 게시글 고유 번호.

title: 게시글 제목.

user_id: 게시글을 작성한 사용자의 ID (users 테이블과 연결).

is_notice: 공지사항 여부를 표시 (True 또는 False).

created_at, updated_at: 글 작성 및 마지막 수정 시각.

참고: 게시글의 본문과 같이 용량이 큰 내용은 효율적인 관리를 위해 MongoDB에 별도로 저장됩니다.

5. comments
역할: 각 게시글에 달린 댓글 내용을 저장합니다.

주요 데이터 (컬럼):

id: 댓글 고유 번호.

content: 댓글의 실제 내용.

post_id: 이 댓글이 어떤 게시글에 달렸는지 알려주는 번호 (posts 테이블과 연결).

user_id: 댓글을 작성한 사용자의 ID (users 테이블과 연결).

created_at, updated_at: 댓글 작성 및 마지막 수정 시각.

6. post_likes 와 comment_likes
역할: 어떤 사용자가 어떤 게시글이나 댓글에 '좋아요'를 눌렀는지 기록합니다.

주요 데이터 (컬럼):

user_id: '좋아요'를 누른 사용자의 ID.

post_id 또는 comment_id: '좋아요'를 받은 게시글 또는 댓글의 ID.

7. nickname_history
역할: 사용자가 닉네임을 변경할 때마다, 이전 닉네임을 기록하여 닉네임 변경 이력을 관리합니다.

주요 데이터 (컬럼):

id: 이력의 고유 번호.

user_id: 닉네임을 변경한 사용자의 ID.

old_nickname: 변경 전 닉네임.

new_nickname: 새로 설정한 닉네임.

changed_at: 변경이 일어난 시각.

8. alembic_version
역할: 데이터베이스 마이그레이션 도구(Alembic)가 사용하는 내부 관리용 테이블입니다. 현재 데이터베이스 구조가 최신 버전인지 추적하는 역할을 하므로, 직접 수정하거나 신경 쓰지 않으셔도 됩니다.
